{"version":3,"sources":["logo.svg","layout/CustomToolbar.js","layout/CustomTableHead.js","layout/SelectInputField.js","layout/CustomModal.js","layout/constants.js","layout/ProjectTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomToolbar","props","numSelected","remove","edit","ToolbarEdit","done","cancel","totalProjects","AppBar","color","position","Toolbar","Typography","variant","Tooltip","title","IconButton","onClick","CustomTableHead","headcells","onSelectAllClick","rowCount","TableHead","TableRow","TableCell","padding","map","headcell","key","id","label","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","MultilineTextFields","status","onChangeHandle","options","formattedTime","inputLabel","classes","React","useState","option","setOption","className","noValidate","autoComplete","InputLabel","TextField","select","value","onChange","event","target","newValue","margin","MenuItem","dialogStyle","dialog","width","fullWidth","DialogTitle","withStyles","root","closeButton","right","top","palette","grey","children","onClose","other","disableTypography","aria-label","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","CustomizedDialogs","open","handleClose","AddRow","PriorityValues","Catergories","Category","setCategory","Priority","setPriority","Dialog","aria-labelledby","dividers","required","defaultValue","Value","multiline","rows","Button","RowData","ProjectName","document","getElementById","ClientName","ContactPerson","category","remarks","StatusValues","CatergoryValues","fab","bottom","redColor","greenColor","orangeColor","blueColor","info","bgColor","backgroundColor","current_datetime","Date","appendLeadingZeroes","n","getHours","getMinutes","getDate","getMonth","getFullYear","ProjectTable","selected","setSelected","data","setData","setToolbarEdit","priority","changeValue","setChangeValue","NewTime","setNewTime","Constants","setOpen","UpdateLS","updatedData","Data","JSON","parse","localStorage","getItem","setItem","stringify","useEffect","push","fetchData","Paper","length","newData","filter","item","currentIndex","findIndex","el","isEdit","time","component","align","Table","TableBody","index","isItemSelected","indexOf","hover","Checkbox","checked","name","newSelected","onCheckHandle","project","client","contact","addedOn","Fab","createData","newRows","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3395dc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Toolbar, Typography, AppBar, Tooltip, IconButton } from '@material-ui/core'\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nfunction CustomToolbar(props) {\r\n    const {numSelected, remove, edit, ToolbarEdit, done, cancel, totalProjects} = props;\r\n    \r\n    return (\r\n        <AppBar color='primary' position=\"relative\">\r\n            <Toolbar >\r\n                <div>\r\n                    {numSelected > 0 ? (\r\n                        <Typography variant='h6'>\r\n                            {numSelected} Selected\r\n                        </Typography>\r\n                    ) : (\r\n                        <Typography variant='h6'>\r\n                             Project Dashboard  ( {totalProjects} )\r\n                        </Typography>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    { numSelected > 0 ? \r\n                        (\r\n                            <>\r\n                                {\r\n                                    ToolbarEdit ? \r\n                                    <Tooltip title=\"Done\">\r\n                                        <IconButton color=\"inherit\" onClick={done}>\r\n                                            <DoneIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    :\r\n                                    <Tooltip title=\"Edit\">\r\n                                        <IconButton color=\"inherit\" onClick={edit}>\r\n                                            <EditIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                }\r\n                                {\r\n                                    ToolbarEdit ? \r\n                                    <Tooltip title=\"Cancel\">\r\n                                        <IconButton color=\"inherit\" onClick={cancel}>\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    :\r\n                                    <Tooltip title=\"Delete\">\r\n                                        <IconButton color=\"inherit\" onClick={remove}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                }  \r\n                            </>\r\n                        ) \r\n                        : null \r\n                    }\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default CustomToolbar;\r\n","import React from 'react'\r\nimport {  TableHead, TableRow, TableCell, Checkbox, Tooltip } from '@material-ui/core'\r\n\r\n\r\n\r\n\r\nfunction CustomTableHead(props) {\r\n    const {headcells, onSelectAllClick, rowCount, numSelected} = props;\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    {/* <Tooltip title={numSelected > 0 ? 'Deselect all' : 'Select all'}>\r\n                        <Checkbox \r\n                            indeterminate={numSelected > 0 && numSelected < rowCount }\r\n                            checked={numSelected === rowCount}\r\n                            onChange={onSelectAllClick}\r\n                        />  \r\n                    </Tooltip> */}\r\n                </TableCell>\r\n                {headcells.map((headcell) => (\r\n                    <TableCell key={headcell.id}>\r\n                        {headcell.label}\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}\r\n\r\nexport default CustomTableHead;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { InputLabel } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    // width: 200,\r\n  },\r\n//   menu: {\r\n//     width: 200,\r\n//   },\r\n}));\r\n\r\nexport default function MultilineTextFields({status, onChangeHandle,formattedTime, options, inputLabel}) {\r\n  const classes = useStyles();\r\n  const [option, setOption] = React.useState(status);\r\n\r\n  const handleChange = event => {\r\n    setOption(event.target.value);\r\n    let newValue = event.target.value;\r\n    // let CurrentTime = formattedTime();\r\n    onChangeHandle(newValue);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.container} noValidate autoComplete=\"off\">\r\n      <div>\r\n        <InputLabel>{inputLabel}</InputLabel>\r\n        <TextField\r\n          id=\"standard-select\"\r\n          select\r\n          className={classes.textField}\r\n          value={option}\r\n          onChange={handleChange}\r\n        //   SelectProps={{\r\n        //     MenuProps: {\r\n        //       className: classes.menu,\r\n        //     },\r\n        //   }}\r\n          margin='dense'\r\n        >\r\n          {options.map(option => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n        \r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { TextField } from '@material-ui/core';\r\nimport MultilineTextFields from './SelectInputField';\r\n\r\nconst dialogStyle = makeStyles(theme => ({\r\n  dialog: {\r\n    width: '100%',\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  }\r\n}))\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)(props => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n    width: \"550px\",\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles(theme => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n\r\n\r\nexport default function CustomizedDialogs({open, handleClose, AddRow, PriorityValues, formattedTime, Catergories}) {\r\n  const classes = dialogStyle();\r\n\r\n  const [Category, setCategory] = useState('');\r\n  const [Priority, setPriority] = useState('');\r\n\r\n  const onChangeCatergoryHandler = (Value) => {\r\n    setCategory(Value);\r\n  };\r\n\r\n  const onChangePriorityHandler = (Value) => {\r\n    setPriority(Value)\r\n  };\r\n\r\n  const handleSubmit = () =>{\r\n    let RowData = {\r\n      ProjectName : document.getElementById('ProjectName').value,\r\n      ClientName : document.getElementById('ClientName').value,\r\n      ContactPerson : document.getElementById('ContactPerson').value,\r\n      category :Category,\r\n      Priority : Priority || 'Low',\r\n      remarks: document.getElementById('remarks').value || 'no remarks yet',\r\n    }\r\n    AddRow(RowData)\r\n  }\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} className={classes.fullWidth}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Add Project\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <div >\r\n            <TextField  \r\n              required\r\n              id=\"ProjectName\"\r\n              label=\"Project Name\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              defaultValue=\"Default Value\"\r\n              className={classes.fullWidth}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              required\r\n              id=\"ClientName\"\r\n              label=\"Client Name\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              defaultValue=\"Default Value\"\r\n              className={classes.fullWidth}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              required\r\n              id=\"ContactPerson\"\r\n              label=\"Contact Person\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              defaultValue=\"Default Value\"\r\n              className={classes.fullWidth}\r\n            />\r\n          </div>\r\n          <div>\r\n            <MultilineTextFields status={\"3D\"} onChangeHandle={onChangeCatergoryHandler} options={Catergories} formattedTime={formattedTime}  inputLabel=\"Select Category\" />\r\n          </div>\r\n          <div>\r\n            <MultilineTextFields status={\"Low\"} onChangeHandle={onChangePriorityHandler} options={PriorityValues} formattedTime={formattedTime}  inputLabel=\"Select Priority\" />\r\n          </div>\r\n          <div> \r\n            <TextField\r\n                id=\"remarks\"\r\n                label=\"Remarks\"\r\n                multiline\r\n                rows=\"2\"\r\n                defaultValue=\"Type your remarks here\"\r\n                margin=\"normal\"\r\n                className={classes.fullWidth}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant='contained' onClick={handleSubmit} color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export const headcells = [\r\n    {id: '0', label: 'Project Name'},\r\n    {id: '1', label: 'Client Name'},\r\n    {id: '2', label: 'Contact Person'},\r\n    {id: '3', label: 'Category'},\r\n    {id: '4', label: 'Priority'},\r\n    {id: '5', label: 'Status'},\r\n    {id: '6', label: 'Added On (24 Hrs)'},\r\n    {id: '7', label: 'Last Modified (24 Hrs)'},\r\n    {id: '8', label: 'Remarks'},\r\n];\r\n\r\nexport const StatusValues = [\r\n    {\r\n        value: 'Done',\r\n        label: 'Done',\r\n    },\r\n    {\r\n        value: 'Work in Progress',\r\n        label: 'Work in Progress',\r\n    },\r\n    {\r\n        value: 'On Hold',\r\n        label: 'On Hold',\r\n    },\r\n];\r\n\r\nexport const PriorityValues = [\r\n    {\r\n        value: 'High',\r\n        label: 'High',\r\n    },\r\n    {\r\n        value: 'Medium',\r\n        label: 'Medium',\r\n    },\r\n    {\r\n        value: 'Low',\r\n        label: 'Low',\r\n    },\r\n];\r\n\r\nexport const CatergoryValues = [\r\n    {\r\n        value: '3D',\r\n        label: \"3D\"\r\n    },\r\n    {\r\n        value: 'Company profile videos',\r\n        label: \"Company profile videos\"\r\n    },\r\n    {\r\n        value: 'Demo videos',\r\n        label: \"Demo videos\"\r\n    },\r\n    {\r\n        value: 'E-learning',\r\n        label: \"E-learning\"\r\n    },\r\n    {\r\n        value: 'Explainer video',\r\n        label: \"Explainer video\"\r\n    },\r\n    {\r\n        value: 'Instructional videos',\r\n        label: \"Instructional videos\"\r\n    },\r\n    {\r\n        value: 'Live action',\r\n        label: \"Live action\"\r\n    },\r\n    {\r\n        value: 'Motion graphics',\r\n        label: \"Motion graphics\"\r\n    },\r\n    {\r\n        value: 'Showreel',\r\n        label: \"Showreel\"\r\n    },\r\n    {\r\n        value: 'Website animation',\r\n        label: \"Website animation\"\r\n    },\r\n];\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Paper,Table, TableHead, TableBody,TableRow, TableCell, Checkbox,  Fab, TextField, Typography } from '@material-ui/core'\r\nimport CustomToolbar from './CustomToolbar';\r\nimport CustomTableHead from './CustomTableHead';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CustomizedDialogs from '../layout/CustomModal'\r\nimport MultilineTextFields from './SelectInputField';\r\nimport * as Constants from \"./constants\"\r\n\r\n\r\nfunction createData(id, project, client, contact,category,priority, status, addedOn, time, remarks, isEdit){\r\n    return {id, project, client, contact,category, priority, status,  addedOn, time, remarks, isEdit};\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2)\r\n    },\r\n    redColor: {\r\n        color: '#d50000'\r\n    },\r\n    greenColor: {\r\n        color: 'green'\r\n    },\r\n    orangeColor: {\r\n        color: '#ef6c00'\r\n    },\r\n    blueColor: {\r\n        color: '#03a9f4'\r\n    },\r\n    info: {\r\n        padding: theme.spacing(4),\r\n    },\r\n    bgColor: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.07)',\r\n    }\r\n    \r\n}));\r\n\r\nconst formattedTime = () => {\r\n    let current_datetime = new Date();\r\n    const months = [\"Jan\", \"Feb\", \"Mar\",\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n    function appendLeadingZeroes(n){\r\n        if(n <= 9){\r\n            return \"0\" + n;\r\n        }\r\n        return n\r\n    }\r\n    let formatted_Date_Time = \r\n    appendLeadingZeroes(current_datetime.getHours()) + \":\" + appendLeadingZeroes(current_datetime.getMinutes()) + \", \" +\r\n    appendLeadingZeroes(current_datetime.getDate()) + \"-\" + months[current_datetime.getMonth()] + \"-\" + current_datetime.getFullYear()  ;\r\n    return formatted_Date_Time;\r\n}\r\n\r\n\r\n//  Main Component \r\nfunction ProjectTable() {\r\n    const classes =  useStyles();\r\n    \r\n    const [selected, setSelected] = React.useState([]);\r\n\r\n    const [data, setData] = React.useState({\r\n        rows : []\r\n    });\r\n\r\n    const AddRow = (RowData) => {\r\n        let name = RowData;\r\n        let id = data.rows.length;\r\n        let project = name.ProjectName;\r\n        let contact = name.ContactPerson;\r\n        let client= name.ClientName;\r\n        let category = name.category;\r\n        let Priority = name.Priority;\r\n        let addedOn = formattedTime();\r\n        let time = formattedTime();\r\n        let remarks = name.remarks;\r\n        let newData = createData( id, project, client, contact,category, Priority, 'Work in Progress', addedOn, time,  remarks , false)\r\n        let newRows = data.rows.slice();\r\n        newRows.push(newData)\r\n        setData({rows: newRows})\r\n        let Data = JSON.parse(localStorage.getItem('Data'));\r\n        // Add bookmark to array\r\n        Data.push(newData);\r\n        // Re-set back to localStorage\r\n        localStorage.setItem('Data', JSON.stringify(Data));\r\n        setOpen(false);\r\n        // console.log(newRows);\r\n    }\r\n\r\n\r\n    const remove = () => {\r\n        var Data = [...data.rows];\r\n     \r\n        // approach 1   \r\n        // for(let i = selected.length-1; i>=0; i--){\r\n        //     newData.splice(selected[i],1);\r\n        // }\r\n\r\n        // approach 2\r\n        // newData = newData.filter(function(value, index){\r\n        //     return selected.indexOf(index) == -1;\r\n        // });\r\n\r\n        let newData = Data.filter(item => item.id !== selected[0]);\r\n\r\n        setData({rows: newData});\r\n        UpdateLS(newData);\r\n        setSelected([]);\r\n    }\r\n\r\n    // Edit Functionalities \r\n    const [ ToolbarEdit, setToolbarEdit] = useState(false);\r\n    const [changeValue, setChangeValue] = useState({\r\n        priority: '',\r\n        status: '',\r\n    });\r\n    const [NewTime, setNewTime] = useState('');\r\n\r\n    const Edit = () => {\r\n        setToolbarEdit(true)\r\n        let newData = [...data.rows];\r\n        let currentIndex = newData.findIndex(el => el.id == selected[0])\r\n        newData[currentIndex].isEdit = true;\r\n        setData({rows: newData});\r\n    }\r\n\r\n    const Done = () => {\r\n        setToolbarEdit(false)\r\n        let newData = [...data.rows];\r\n        let currentIndex = newData.findIndex(el => el.id == selected[0]);\r\n        newData[currentIndex].isEdit = false;\r\n        newData[currentIndex].priority = changeValue.priority || newData[currentIndex].priority;\r\n        newData[currentIndex].status = changeValue.status ||  newData[currentIndex].status;\r\n        newData[currentIndex].time = NewTime || newData[currentIndex].time;\r\n        newData[currentIndex].remarks = document.getElementById('remarks').value || newData[currentIndex].remarks;\r\n        setData({rows: newData})\r\n        UpdateLS(newData);\r\n    }\r\n    \r\n    const Cancel = () => {\r\n        setToolbarEdit(false)\r\n        let newData = [...data.rows];\r\n        let currentIndex = newData.findIndex(el => el.id == selected[0]);\r\n        newData[currentIndex].isEdit = false;\r\n        setData({rows: newData})\r\n    }\r\n\r\n\r\n    const onChangeHandle = (Value) => {\r\n        if(Value === Constants.PriorityValues[0].value || Value === Constants.PriorityValues[1].value || Value === Constants.PriorityValues[2].value){\r\n            setChangeValue({\r\n                priority: Value\r\n            })\r\n        }\r\n        if(Value === Constants.StatusValues[0].value || Value === Constants.StatusValues[1].value || Value === Constants.StatusValues[2].value){\r\n            setChangeValue({\r\n                status: Value\r\n            })\r\n        }\r\n        setNewTime(formattedTime());\r\n    };\r\n    \r\n\r\n\r\n    const onCheckHandle = (name) => {\r\n        let newSelected = [...selected];\r\n        if(newSelected.length == 0){\r\n            newSelected.push(name);\r\n            setSelected(newSelected);\r\n        } else {\r\n            setSelected([]);\r\n        }\r\n    }\r\n\r\n    const isSelected = value => selected.indexOf(value) !== -1;\r\n\r\n\r\n    \r\n\r\n    // Modal Functionality\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    const fetchData =() => {\r\n        if(localStorage.getItem('Data') === null){\r\n            // Init array\r\n            let Data = [];\r\n            // Add to array\r\n            Data.push(data.rows);\r\n            // Set to localStorage\r\n            localStorage.setItem('Data', JSON.stringify(data.rows));\r\n        } \r\n        else {\r\n            // Get data from localStorage\r\n            let Data = JSON.parse(localStorage.getItem('Data'));\r\n            // Add data to state\r\n            setData({rows: Data})\r\n        }\r\n    }\r\n\r\n    const UpdateLS = (updatedData) => {\r\n        let Data = JSON.parse(localStorage.getItem('Data'));\r\n        // Add bookmark to array\r\n        Data = updatedData;\r\n        // Re-set back to localStorage\r\n        localStorage.setItem('Data', JSON.stringify(Data));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [])\r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n           <Paper>\r\n                <CustomToolbar numSelected={selected.length} remove={remove} edit={Edit} ToolbarEdit={ToolbarEdit} done={Done}  cancel={Cancel} totalProjects={data.rows.length}/>\r\n                {data.rows.length == 0 ? \r\n                    <Typography variant='h5' component='h5' align='center' color='primary' className={classes.info}>\r\n                        No Data Found. \r\n                        <br/>\r\n                        <br/>\r\n                        Click on the Add Icon to Add Project.\r\n                    </Typography>\r\n                    :\r\n                    <Table >\r\n                        <CustomTableHead \r\n                            headcells={Constants.headcells}\r\n                            numSelected={selected.length}\r\n                            // onSelectAllClick={handleSelectAllClick}\r\n                            rowCount={data.rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {data.rows.map((data,index) => {\r\n                                const isItemSelected = isSelected(data.id);\r\n                                return(\r\n                                    <TableRow hover key={index} className={isItemSelected ? classes.bgColor : null}>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox \r\n                                                checked={isItemSelected}\r\n                                                onChange={event => onCheckHandle(data.id)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>{data.project}</TableCell>\r\n                                        <TableCell >{data.client}</TableCell>\r\n                                        <TableCell >{data.contact}</TableCell>\r\n                                        <TableCell >{data.category}</TableCell>\r\n                                        <TableCell className={data.priority === 'High' ? classes.redColor : data.priority === 'Medium' ? classes.greenColor : classes.orangeColor}>\r\n                                            {data.isEdit ? <MultilineTextFields status={data.priority} onChangeHandle={onChangeHandle} formattedTime={formattedTime} options={Constants.PriorityValues} /> : <b>{data.priority}</b> }\r\n                                        </TableCell>\r\n                                        <TableCell className={data.status === 'Work in Progress' ? classes.blueColor : data.status === 'On Hold' ? classes.redColor : classes.greenColor }>\r\n                                            {data.isEdit ? <MultilineTextFields status={data.status} onChangeHandle={onChangeHandle} formattedTime={formattedTime} options={Constants.StatusValues} /> : <b>{data.status}</b> }\r\n                                        </TableCell>\r\n                                        <TableCell >{data.addedOn}</TableCell>\r\n                                        <TableCell >{data.time}</TableCell>\r\n                                        <TableCell >\r\n                                            {data.isEdit ? <TextField\r\n                                                id=\"remarks\"\r\n                                                \r\n                                                multiline\r\n                                                rows=\"2\"\r\n                                                defaultValue={data.remarks}\r\n                                                margin=\"normal\"\r\n                                            /> :\r\n                                                <>{data.remarks}</>\r\n                                            }\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                }\r\n                \r\n                <Fab color=\"primary\" aria-label=\"add\" className={classes.fab} onClick={handleClickOpen}>\r\n                    <AddIcon />\r\n                </Fab>\r\n                <CustomizedDialogs handleClose={handleClose} open={open} AddRow={AddRow} PriorityValues={Constants.PriorityValues}  Catergories={Constants.CatergoryValues}  formattedTime={formattedTime}/>\r\n           </Paper> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectTable;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ProjectTable from \"./layout/ProjectTable\"\n\nfunction App() {\n  return (\n    <div>\n      <ProjectTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}